name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing Job
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
          
    - name: Install Python dependencies
      run: uv sync --extra dev
      
    - name: Run backend tests
      run: uv run pytest tests/ -v --cov=ai_search_agent --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing Job
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run frontend tests (if available)
      working-directory: frontend
      run: npm test --if-present
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Security and Quality Checks
  security-quality:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest
        
    - name: Install Python dependencies
      run: uv sync --extra dev
      
    - name: Run security checks
      run: |
        uv run bandit -r ai_search_agent/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
        
    - name: Run code formatting check
      run: uv run black --check --diff ai_search_agent/ tests/
      
    - name: Run linting
      run: uv run flake8 ai_search_agent/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest
        
    - name: Install dependencies
      run: |
        uv sync --extra dev
        cd frontend && npm ci
        
    - name: Start backend server
      run: |
        uv run uvicorn ai_search_agent.api:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run integration tests
      run: |
        curl -f http://localhost:8000/health || exit 1
        echo "Backend is responding"
        
    - name: Build and test frontend
      working-directory: frontend
      run: |
        npm run build
        npm run preview &
        sleep 8
        curl -f http://localhost:5173/ || exit 1
        echo "Frontend is working"

  # Deployment (Optional - for future use)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-quality, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This is where you'd add deployment logic"
        echo "Examples: Heroku, AWS, DigitalOcean, etc."
        
    - name: Notify deployment
      run: |
        echo "âœ… Successfully deployed to staging!"
        echo "Staging URL: https://staging-ai-search-agent.herokuapp.com"

  # Production Deployment (Optional - for future use)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-quality, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "This is where you'd add production deployment logic"
        echo "Examples: Heroku, AWS, DigitalOcean, etc."
        
    - name: Notify deployment
      run: |
        echo "âœ… Successfully deployed to production!"
        echo "Production URL: https://ai-search-agent.herokuapp.com"
